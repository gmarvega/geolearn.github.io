import { StyleValue } from 'vue';
import { Rect } from '../types';
declare const _default: import("vue").DefineComponent<{
    allowInteraction: {
        type: BooleanConstructor;
        default: boolean;
    };
    rect: {
        readonly type: import("vue").PropType<Rect>;
    };
}, {
    overlayKeys: import("vue").ComputedRef<("top" | "left" | "right" | "bottom" | "center")[]>;
    overlaysStyle: import("vue").ComputedRef<(key: "top" | "left" | "right" | "bottom" | "center") => StyleValue>;
    overlayWrapperStyle: import("vue").ComputedRef<StyleValue>;
    overlaysTransform: {
        top: {
            width: number;
            height: number;
            x: number;
            y: number;
            scaleX: number;
            scaleY: number;
        };
        left: {
            width: number;
            height: number;
            x: number;
            y: number;
            scaleX: number;
            scaleY: number;
        };
        right: {
            width: number;
            height: number;
            x: number;
            y: number;
            scaleX: number;
            scaleY: number;
        };
        bottom: {
            width: number;
            height: number;
            x: number;
            y: number;
            scaleX: number;
            scaleY: number;
        };
        center: {
            width: number;
            height: number;
            x: number;
            y: number;
            scaleX: number;
            scaleY: number;
        };
    };
    isTimeout: import("vue").ComputedRef<boolean>;
    onClick: () => void;
    highlight: (newRect: Rect) => Promise<"highlight"> | undefined;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("overlay-click" | "update:rect")[], "overlay-click" | "update:rect", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    allowInteraction: {
        type: BooleanConstructor;
        default: boolean;
    };
    rect: {
        readonly type: import("vue").PropType<Rect>;
    };
}>> & {
    "onOverlay-click"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rect"?: ((...args: any[]) => any) | undefined;
}, {
    allowInteraction: boolean;
}>;
export default _default;
