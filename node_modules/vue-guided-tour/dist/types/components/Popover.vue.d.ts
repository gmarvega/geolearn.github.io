import { ExtractPropTypes, StyleValue, ComputedRef } from 'vue';
import { Rect } from '../types';
declare const _default: import("vue").DefineComponent<{
    arrow: {
        type: BooleanConstructor;
        default: boolean;
    };
    offset: {
        type: NumberConstructor;
        default: number;
    };
    position: {
        type: import("vue").PropType<"top" | "left" | "right" | "bottom">;
        default: string;
        validator: (value: any) => boolean;
    };
    placement: {
        type: import("vue").PropType<"start" | "center" | "end">;
        default: string;
        validator: (value: any) => boolean;
    };
    autoAdjust: {
        type: BooleanConstructor;
        default: boolean;
    };
    width: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    rect: {
        readonly type: import("vue").PropType<Rect>;
    };
}, {
    rect: import("vue").Ref<Rect | undefined>;
    popoverRef: import("vue").Ref<HTMLElement | null>;
    currentPosition: ComputedRef<"top" | "left" | "right" | "bottom">;
    popoverStyle: ComputedRef<StyleValue>;
    arrowStyle: ComputedRef<StyleValue>;
    isArrowEnabled: ComputedRef<number | false | undefined>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<ExtractPropTypes<{
    arrow: {
        type: BooleanConstructor;
        default: boolean;
    };
    offset: {
        type: NumberConstructor;
        default: number;
    };
    position: {
        type: import("vue").PropType<"top" | "left" | "right" | "bottom">;
        default: string;
        validator: (value: any) => boolean;
    };
    placement: {
        type: import("vue").PropType<"start" | "center" | "end">;
        default: string;
        validator: (value: any) => boolean;
    };
    autoAdjust: {
        type: BooleanConstructor;
        default: boolean;
    };
    width: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    rect: {
        readonly type: import("vue").PropType<Rect>;
    };
}>>, {
    position: "top" | "left" | "right" | "bottom";
    placement: "start" | "center" | "end";
    offset: number;
    arrow: boolean;
    autoAdjust: boolean;
    width: string | number;
}>;
export default _default;
