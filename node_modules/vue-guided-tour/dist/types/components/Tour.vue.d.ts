import { nextTick } from 'vue';
import { Step } from '../types';
declare const _default: import("vue").DefineComponent<{
    allowInteraction: {
        type: BooleanConstructor;
        default: boolean;
    };
    arrow: {
        type: BooleanConstructor;
        default: boolean;
    };
    offset: {
        type: NumberConstructor;
        default: number;
    };
    position: {
        type: import("vue").PropType<"top" | "left" | "right" | "bottom">;
        default: string;
        validator: (value: any) => boolean;
    };
    placement: {
        type: import("vue").PropType<"start" | "center" | "end">;
        default: string;
        validator: (value: any) => boolean;
    };
    autoAdjust: {
        type: BooleanConstructor;
        default: boolean;
    };
    width: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    steps: {
        readonly type: import("vue").PropType<Step[]>;
        readonly required: true;
        readonly default: () => never[];
    };
    stepIndex: {
        readonly type: NumberConstructor;
        readonly default: -1;
    };
    padding: {
        readonly type: NumberConstructor;
        readonly default: 0;
    };
    useOverlay: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
    pagination: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
    closeBtn: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
    allowKeyboardEvent: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
    allowOverlayClose: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
    allowEscClose: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
    name: {
        readonly type: StringConstructor;
        readonly default: undefined;
    };
}, {
    vgtRef: import("vue").Ref<HTMLElement | null>;
    vgtOverlayRef: import("vue").Ref<({
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            allowInteraction: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            allowInteraction: {
                type: BooleanConstructor;
                default: boolean;
            };
            rect: {
                readonly type: import("vue").PropType<import("../types").Rect>;
            };
        }>> & {
            "onOverlay-click"?: ((...args: any[]) => any) | undefined;
            "onUpdate:rect"?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "allowInteraction">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: "overlay-click" | "update:rect", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            allowInteraction: {
                type: BooleanConstructor;
                default: boolean;
            };
            rect: {
                readonly type: import("vue").PropType<import("../types").Rect>;
            };
        }>> & {
            "onOverlay-click"?: ((...args: any[]) => any) | undefined;
            "onUpdate:rect"?: ((...args: any[]) => any) | undefined;
        }, {
            overlayKeys: import("vue").ComputedRef<("top" | "left" | "right" | "bottom" | "center")[]>;
            overlaysStyle: import("vue").ComputedRef<(key: "top" | "left" | "right" | "bottom" | "center") => import("vue").StyleValue>;
            overlayWrapperStyle: import("vue").ComputedRef<import("vue").StyleValue>;
            overlaysTransform: {
                top: {
                    width: number;
                    height: number;
                    x: number;
                    y: number;
                    scaleX: number;
                    scaleY: number;
                };
                left: {
                    width: number;
                    height: number;
                    x: number;
                    y: number;
                    scaleX: number;
                    scaleY: number;
                };
                right: {
                    width: number;
                    height: number;
                    x: number;
                    y: number;
                    scaleX: number;
                    scaleY: number;
                };
                bottom: {
                    width: number;
                    height: number;
                    x: number;
                    y: number;
                    scaleX: number;
                    scaleY: number;
                };
                center: {
                    width: number;
                    height: number;
                    x: number;
                    y: number;
                    scaleX: number;
                    scaleY: number;
                };
            };
            isTimeout: import("vue").ComputedRef<boolean>;
            onClick: () => void;
            highlight: (newRect: import("../types").Rect) => Promise<"highlight"> | undefined;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("overlay-click" | "update:rect")[], string, {
            allowInteraction: boolean;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        allowInteraction: {
            type: BooleanConstructor;
            default: boolean;
        };
        rect: {
            readonly type: import("vue").PropType<import("../types").Rect>;
        };
    }>> & {
        "onOverlay-click"?: ((...args: any[]) => any) | undefined;
        "onUpdate:rect"?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{
        overlayKeys: import("vue").ComputedRef<("top" | "left" | "right" | "bottom" | "center")[]>;
        overlaysStyle: import("vue").ComputedRef<(key: "top" | "left" | "right" | "bottom" | "center") => import("vue").StyleValue>;
        overlayWrapperStyle: import("vue").ComputedRef<import("vue").StyleValue>;
        overlaysTransform: {
            top: {
                width: number;
                height: number;
                x: number;
                y: number;
                scaleX: number;
                scaleY: number;
            };
            left: {
                width: number;
                height: number;
                x: number;
                y: number;
                scaleX: number;
                scaleY: number;
            };
            right: {
                width: number;
                height: number;
                x: number;
                y: number;
                scaleX: number;
                scaleY: number;
            };
            bottom: {
                width: number;
                height: number;
                x: number;
                y: number;
                scaleX: number;
                scaleY: number;
            };
            center: {
                width: number;
                height: number;
                x: number;
                y: number;
                scaleX: number;
                scaleY: number;
            };
        };
        isTimeout: import("vue").ComputedRef<boolean>;
        onClick: () => void;
        highlight: (newRect: import("../types").Rect) => Promise<"highlight"> | undefined;
    }> & {} & {} & import("vue").ComponentCustomProperties) | null>;
    showPopover: import("vue").Ref<boolean>;
    showOverlay: import("vue").Ref<boolean>;
    currentStepIndex: import("vue").Ref<number>;
    currentStepRect: import("vue").ComputedRef<{
        top: number;
        right: number;
        bottom: number;
        left: number;
        width: number;
        height: number;
    } | undefined>;
    currentStep: import("vue").ComputedRef<{
        popover: {
            role: string;
            id: string;
            'aria-labelledby': string | undefined;
            'aria-describedby': string | undefined;
            position?: "top" | "left" | "right" | "bottom" | undefined;
            placement?: "start" | "center" | "end" | undefined;
            offset?: number | undefined;
            arrow?: boolean | undefined;
            autoAdjust?: boolean | undefined;
            width?: string | number | undefined;
        };
        overlay: {
            allowInteraction?: boolean | undefined;
        };
        _step: Step;
        target?: string | undefined;
        title?: string | undefined;
        content?: string | undefined;
        slot?: string | undefined;
        padding?: number | undefined;
        onBeforeNext?: (() => any) | undefined;
        onBeforePrev?: (() => any) | undefined;
        onBeforeExit?: (() => any) | undefined;
    } | null>;
    isFirstStep: import("vue").ComputedRef<boolean>;
    isLastStep: import("vue").ComputedRef<boolean>;
    start: (index?: number) => void;
    next: () => Promise<void>;
    prev: () => Promise<void>;
    exit: () => Promise<void>;
    move: (index?: number) => void;
    onOverlayClick: () => void;
    onCloseClick: () => void;
    afterMove: () => void;
    afterLeave: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:step-index" | "after-start" | "after-exit" | "after-move")[], "update:step-index" | "after-start" | "after-exit" | "after-move", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    allowInteraction: {
        type: BooleanConstructor;
        default: boolean;
    };
    arrow: {
        type: BooleanConstructor;
        default: boolean;
    };
    offset: {
        type: NumberConstructor;
        default: number;
    };
    position: {
        type: import("vue").PropType<"top" | "left" | "right" | "bottom">;
        default: string;
        validator: (value: any) => boolean;
    };
    placement: {
        type: import("vue").PropType<"start" | "center" | "end">;
        default: string;
        validator: (value: any) => boolean;
    };
    autoAdjust: {
        type: BooleanConstructor;
        default: boolean;
    };
    width: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    steps: {
        readonly type: import("vue").PropType<Step[]>;
        readonly required: true;
        readonly default: () => never[];
    };
    stepIndex: {
        readonly type: NumberConstructor;
        readonly default: -1;
    };
    padding: {
        readonly type: NumberConstructor;
        readonly default: 0;
    };
    useOverlay: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
    pagination: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
    closeBtn: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
    allowKeyboardEvent: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
    allowOverlayClose: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
    allowEscClose: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
    name: {
        readonly type: StringConstructor;
        readonly default: undefined;
    };
}>> & {
    "onUpdate:step-index"?: ((...args: any[]) => any) | undefined;
    "onAfter-start"?: ((...args: any[]) => any) | undefined;
    "onAfter-exit"?: ((...args: any[]) => any) | undefined;
    "onAfter-move"?: ((...args: any[]) => any) | undefined;
}, {
    steps: Step[];
    stepIndex: number;
    padding: number;
    useOverlay: boolean;
    pagination: boolean;
    closeBtn: boolean;
    allowKeyboardEvent: boolean;
    allowOverlayClose: boolean;
    allowEscClose: boolean;
    name: string;
    position: "top" | "left" | "right" | "bottom";
    placement: "start" | "center" | "end";
    offset: number;
    arrow: boolean;
    autoAdjust: boolean;
    width: string | number;
    allowInteraction: boolean;
}>;
export default _default;
